// Generated by CoffeeScript 1.9.0

/*
 * Install coffee-script first.
 * $ sudo npm install coffee-script -g
#
 * Then download the json file from wsdot.
#
 * Run the program with input file as the resource:
 * $ coffee app.coffee --in=wsdot-file.json --out=../somedir/newfile.json
 * or with a remote url:
 * $ coffee app.coffee --in=https://data.seattle.gov/api/views/2az7-96yc/rows.json?accessType=DOWNLOAD \
 *                     --out=../intersections.json
 */
var fs, request, url;

fs = require('fs');

url = require('url');

request = require('request');

module.exports = function(resource, out) {
  var chunksCount, parseData, urlObj, _ref;
  if (!resource) {
    throw new Error("No input file given");
  }
  if (!out) {
    throw new Error("No output file given");
  }
  urlObj = url.parse(resource);
  if ((_ref = urlObj.protocol) != null ? _ref.match(/http(?:s)?/) : void 0) {
    console.log("Sending request to the remote resource. Retrieving data.");
    chunksCount = 0;
    request.get(url.format(urlObj), function(err, resp, body) {
      if (err) {
        throw new Error("Remote resource request failed with an error: " + (JSON.stringify(err, null, 4)));
      } else {
        return parseData(body);
      }
    }).on('response', function(response) {
      return console.log("Progress: ");
    }).on('data', function(chunk) {
      if (chunksCount++ % 10 === 0) {
        return process.stdout.write('.');
      }
    });
  } else if (urlObj.path != null) {
    fs.readFile(urlObj.path, function(err, dataset) {
      if (err) {
        throw new Error("Error reading input file " + urlObj.path + ": " + (JSON.stringify(err)));
      } else {
        return parseData(dataset);
      }
    });
  } else {
    throw new Error("Provided --in value is neither path nor url.");
  }
  return parseData = function(dataset) {
    var column, headers, i, j, newRow, results, row, value, _i, _j, _len, _len1, _ref1;
    console.log("\nResource " + (url.format(urlObj)) + " succesfully consumed and is about to be processed.");
    console.log("Trying to parse resource content as JSON.");
    dataset = JSON.parse(dataset);
    console.log("Data successfully parsed as JSON.");
    console.log("Fetching headers.");
    headers = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = dataset.meta.view.columns;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        column = _ref1[_i];
        _results.push(column.name);
      }
      return _results;
    })();
    console.log("Headers are: " + (headers.join(', ')));
    console.log("Mapping headers and columns data.");
    results = [];
    _ref1 = dataset.data;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      row = _ref1[i];
      newRow = {};
      for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
        value = row[j];
        newRow[headers[j]] = value;
      }
      results.push(newRow);
    }
    console.log("Stringifying mapped data to JSON.");
    results = JSON.stringify(results, null, 4);
    console.log("Saving pretty data to the new out file \"" + out + "\".");
    return fs.writeFile(out, results, function(err) {
      if (err) {
        throw new Error("Error during saving data to the file \"" + out + "\": " + err);
      } else {
        return console.log("File \"" + out + "\" successfully saved.");
      }
    });
  };
};
