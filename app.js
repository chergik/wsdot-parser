// Generated by CoffeeScript 1.9.0

/*
 * Install coffee-script first.
 * $ sudo npm install coffee-script -g
#
 * Then download the json file from wsdot.
#
 * Run the program with input file as the resource:
 * $ coffee app.coffee --in=wsdot-file.json --out=../somedir/newfile.json
 * or with a remote url:
 * $ coffee app.coffee --in=https://data.seattle.gov/api/views/2az7-96yc/rows.json?accessType=DOWNLOAD \
 *                     --out=../intersections.json
 */
var fs, request, url;

fs = require('fs');

url = require('url');

request = require('request');

module.exports = function(resource, out, cb) {
  var chunksCount, debug, msg, parseData, urlObj, _ref;
  if (cb == null) {
    cb = null;
  }
  debug = function(message) {
    if (!cb) {
      return console.log(message);
    }
  };
  if (!resource) {
    msg = "No input file given";
    if (cb) {
      cb(msg, null);
    } else {
      throw new Error(msg);
    }
  }
  if (!out) {
    msg = "No output file given";
    if (cb) {
      cb(msg, null);
    } else {
      throw new Error(msg);
    }
  }
  urlObj = url.parse(resource);
  if ((_ref = urlObj.protocol) != null ? _ref.match(/http(?:s)?/) : void 0) {
    debug("Sending request to the remote resource. Retrieving data.");
    chunksCount = 0;
    request.get(url.format(urlObj), function(err, resp, body) {
      if (err) {
        msg = "Remote resource request failed with an error: " + (JSON.stringify(err, null, 4));
        if (cb) {
          return cb(msg, null);
        } else {
          throw new Error(msg);
        }
      } else {
        return parseData(body, cb);
      }
    }).on('response', function(response) {
      return debug("Progress: ");
    }).on('data', function(chunk) {
      if (chunksCount++ % 10 === 0) {
        return process.stdout.write('.');
      }
    });
  } else if (urlObj.path != null) {
    fs.readFile(urlObj.path, function(err, dataset) {
      if (err) {
        msg = "Error reading input file " + urlObj.path + ": " + (JSON.stringify(err));
        if (cb) {
          return cb(msg, null);
        } else {
          throw new Error(msg);
        }
      } else {
        return parseData(dataset, cb);
      }
    });
  } else {
    msg = "Provided --in value is neither path nor url.";
    if (cb) {
      cb(msg, null);
    } else {
      throw new Error(msg);
    }
  }
  return parseData = function(dataset, cb) {
    var column, headers, i, j, newRow, results, resultsJson, row, value;
    if (cb == null) {
      cb = null;
    }
    debug("\nResource " + (url.format(urlObj)) + " succesfully consumed and is about to be processed.");
    debug("Trying to parse resource content as JSON.");
    dataset = JSON.parse(dataset);
    debug("Data successfully parsed as JSON.");
    debug("Fetching headers.");
    headers = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = dataset.meta.view.columns;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        column = _ref1[_i];
        _results.push(column.name);
      }
      return _results;
    })();
    debug("Headers are: " + (headers.join(', ')));
    debug("Mapping headers and columns data.");
    results = [];
    results = (function() {
      var _i, _j, _len, _len1, _ref1, _results;
      _ref1 = dataset.data;
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        row = _ref1[i];
        newRow = {};
        for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
          value = row[j];
          newRow[headers[j]] = value;
        }
        _results.push(results.push(newRow));
      }
      return _results;
    })();
    if (cb) {
      return cb(null, results);
    } else {
      debug("Stringifying mapped data to JSON.");
      resultsJson = JSON.stringify(results, null, 4);
      debug("Saving pretty data to the new out file \"" + out + "\".");
      return fs.writeFile(out, results, function(err) {
        if (err) {
          throw new Error("Error during saving data to the file \"" + out + "\": " + err);
        } else {
          return debug("File \"" + out + "\" successfully saved.");
        }
      });
    }
  };
};
